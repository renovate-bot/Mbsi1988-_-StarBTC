/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type MerkleProofDataStruct = {
  proof: BytesLike[];
  root: BytesLike;
  leaf: BytesLike;
  flags: boolean[];
};

export type MerkleProofDataStructOutput = [
  string[],
  string,
  string,
  boolean[]
] & { proof: string[]; root: string; leaf: string; flags: boolean[] };

export interface OrderInterface extends utils.Interface {
  functions: {
    "arbitrationPayee()": FunctionFragment;
    "borrow(bytes)": FunctionFragment;
    "borrowExpirationTime()": FunctionFragment;
    "borrowedTime()": FunctionFragment;
    "borrower()": FunctionFragment;
    "borrowerBtcAddress()": FunctionFragment;
    "borrowerConfirmRewardsTips()": FunctionFragment;
    "borrowerProofBlock()": FunctionFragment;
    "borrowerProofTime()": FunctionFragment;
    "borrowerPublicKey()": FunctionFragment;
    "borrowerRepaidTime()": FunctionFragment;
    "closeOrder()": FunctionFragment;
    "collateralAmount()": FunctionFragment;
    "confirmRegularUnlockTransfer(bytes32,bytes32)": FunctionFragment;
    "confirmTransferToLender(bytes32,bytes32)": FunctionFragment;
    "createBorrowOrder(address,uint256,uint256,string,bytes,uint256)": FunctionFragment;
    "createLendOrder(address,uint256,uint256,uint8,bytes,uint256)": FunctionFragment;
    "createTime()": FunctionFragment;
    "getArbitrationRequestCost()": FunctionFragment;
    "getRegularUnlockTransferZkpStatus()": FunctionFragment;
    "getToLenderTransferZkpStatus()": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,uint256,address,uint256,uint256)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "interestValue()": FunctionFragment;
    "isArbitrationProofValid()": FunctionFragment;
    "lender()": FunctionFragment;
    "lenderAddressType()": FunctionFragment;
    "lenderBtcAddress()": FunctionFragment;
    "lenderConfirmRewardsTips()": FunctionFragment;
    "lenderManuallyConfirmBTCTime()": FunctionFragment;
    "lenderProofBlock()": FunctionFragment;
    "lenderProofTime()": FunctionFragment;
    "lenderPublicKey()": FunctionFragment;
    "limitedDays()": FunctionFragment;
    "loanScript()": FunctionFragment;
    "lockTime1()": FunctionFragment;
    "lockTime2()": FunctionFragment;
    "network()": FunctionFragment;
    "orderType()": FunctionFragment;
    "owner()": FunctionFragment;
    "preImage()": FunctionFragment;
    "preImageHash()": FunctionFragment;
    "proofedDelayBlock()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "repaidExpireTime()": FunctionFragment;
    "repay(bytes,bytes)": FunctionFragment;
    "repayBtcRawData()": FunctionFragment;
    "repaySignature()": FunctionFragment;
    "requestArbitration(bytes,bytes)": FunctionFragment;
    "status()": FunctionFragment;
    "submitProofExpirationTime()": FunctionFragment;
    "submitRegularUnlockTransferProof(bytes,bytes[],uint32,(bytes32[],bytes32,bytes32,bool[]))": FunctionFragment;
    "submitToLenderTransferProof(bytes,bytes[],uint32,(bytes32[],bytes32,bytes32,bool[]))": FunctionFragment;
    "takeOrder(string,bytes,bytes32,string,uint256)": FunctionFragment;
    "takenExpireTime()": FunctionFragment;
    "takenTime()": FunctionFragment;
    "toBorrowerBtcTx()": FunctionFragment;
    "toBorrowerMerkleProofTx()": FunctionFragment;
    "toLenderBtcTx()": FunctionFragment;
    "toLenderMerkleProofTx()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenAmount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arbitrationPayee"
      | "borrow"
      | "borrowExpirationTime"
      | "borrowedTime"
      | "borrower"
      | "borrowerBtcAddress"
      | "borrowerConfirmRewardsTips"
      | "borrowerProofBlock"
      | "borrowerProofTime"
      | "borrowerPublicKey"
      | "borrowerRepaidTime"
      | "closeOrder"
      | "collateralAmount"
      | "confirmRegularUnlockTransfer"
      | "confirmTransferToLender"
      | "createBorrowOrder"
      | "createLendOrder"
      | "createTime"
      | "getArbitrationRequestCost"
      | "getRegularUnlockTransferZkpStatus"
      | "getToLenderTransferZkpStatus"
      | "initialize"
      | "interestRate"
      | "interestValue"
      | "isArbitrationProofValid"
      | "lender"
      | "lenderAddressType"
      | "lenderBtcAddress"
      | "lenderConfirmRewardsTips"
      | "lenderManuallyConfirmBTCTime"
      | "lenderProofBlock"
      | "lenderProofTime"
      | "lenderPublicKey"
      | "limitedDays"
      | "loanScript"
      | "lockTime1"
      | "lockTime2"
      | "network"
      | "orderType"
      | "owner"
      | "preImage"
      | "preImageHash"
      | "proofedDelayBlock"
      | "renounceOwnership"
      | "repaidExpireTime"
      | "repay"
      | "repayBtcRawData"
      | "repaySignature"
      | "requestArbitration"
      | "status"
      | "submitProofExpirationTime"
      | "submitRegularUnlockTransferProof"
      | "submitToLenderTransferProof"
      | "takeOrder"
      | "takenExpireTime"
      | "takenTime"
      | "toBorrowerBtcTx"
      | "toBorrowerMerkleProofTx"
      | "toLenderBtcTx"
      | "toLenderMerkleProofTx"
      | "token"
      | "tokenAmount"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arbitrationPayee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrow", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "borrowExpirationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowedTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "borrower", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "borrowerBtcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerConfirmRewardsTips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerProofBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerProofTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "borrowerRepaidTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "closeOrder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "collateralAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "confirmRegularUnlockTransfer",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmTransferToLender",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowOrder",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendOrder",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getArbitrationRequestCost",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRegularUnlockTransferZkpStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getToLenderTransferZkpStatus",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "interestValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isArbitrationProofValid",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lenderAddressType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderBtcAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderConfirmRewardsTips",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderManuallyConfirmBTCTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderProofBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderProofTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lenderPublicKey",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "limitedDays",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loanScript",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockTime1", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockTime2", values?: undefined): string;
  encodeFunctionData(functionFragment: "network", values?: undefined): string;
  encodeFunctionData(functionFragment: "orderType", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "preImage", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "preImageHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proofedDelayBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repaidExpireTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayBtcRawData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "repaySignature",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestArbitration",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "submitProofExpirationTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitRegularUnlockTransferProof",
    values: [BytesLike, BytesLike[], BigNumberish, MerkleProofDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "submitToLenderTransferProof",
    values: [BytesLike, BytesLike[], BigNumberish, MerkleProofDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "takeOrder",
    values: [string, BytesLike, BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takenExpireTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "takenTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toBorrowerBtcTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toBorrowerMerkleProofTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toLenderBtcTx",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "toLenderMerkleProofTx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "arbitrationPayee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowedTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrower", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowerBtcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerConfirmRewardsTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerProofBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerProofTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "borrowerRepaidTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmRegularUnlockTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "confirmTransferToLender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getArbitrationRequestCost",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegularUnlockTransferZkpStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getToLenderTransferZkpStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isArbitrationProofValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lender", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lenderAddressType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderBtcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderConfirmRewardsTips",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderManuallyConfirmBTCTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderProofBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderProofTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lenderPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitedDays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loanScript", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTime1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockTime2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "network", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "orderType", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "preImage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "preImageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proofedDelayBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repaidExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayBtcRawData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repaySignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestArbitration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitProofExpirationTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitRegularUnlockTransferProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitToLenderTransferProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeOrder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "takenExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takenTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toBorrowerBtcTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toBorrowerMerkleProofTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toLenderBtcTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "toLenderMerkleProofTx",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "ArbitrationRequested(address)": EventFragment;
    "BorrowSuccessful(address)": EventFragment;
    "BorrowerBTCTransferManuallyConfirmed(address)": EventFragment;
    "BorrowerBTCTransferProofSubmitted(address,bytes32,uint8)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "LenderBTCTransferManuallyConfirmed(address)": EventFragment;
    "LenderBTCTransferProofSubmitted(address,bytes32,uint8)": EventFragment;
    "OrderClosed(address)": EventFragment;
    "OrderTaken(address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RepaymentMade(address,uint256,uint256,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrationRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BorrowSuccessful"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerBTCTransferManuallyConfirmed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BorrowerBTCTransferProofSubmitted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LenderBTCTransferManuallyConfirmed"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LenderBTCTransferProofSubmitted"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderClosed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderTaken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepaymentMade"): EventFragment;
}

export interface ArbitrationRequestedEventObject {
  orderId: string;
}
export type ArbitrationRequestedEvent = TypedEvent<
  [string],
  ArbitrationRequestedEventObject
>;

export type ArbitrationRequestedEventFilter =
  TypedEventFilter<ArbitrationRequestedEvent>;

export interface BorrowSuccessfulEventObject {
  orderId: string;
}
export type BorrowSuccessfulEvent = TypedEvent<
  [string],
  BorrowSuccessfulEventObject
>;

export type BorrowSuccessfulEventFilter =
  TypedEventFilter<BorrowSuccessfulEvent>;

export interface BorrowerBTCTransferManuallyConfirmedEventObject {
  orderId: string;
}
export type BorrowerBTCTransferManuallyConfirmedEvent = TypedEvent<
  [string],
  BorrowerBTCTransferManuallyConfirmedEventObject
>;

export type BorrowerBTCTransferManuallyConfirmedEventFilter =
  TypedEventFilter<BorrowerBTCTransferManuallyConfirmedEvent>;

export interface BorrowerBTCTransferProofSubmittedEventObject {
  orderId: string;
  zkTxHash: string;
  status: number;
}
export type BorrowerBTCTransferProofSubmittedEvent = TypedEvent<
  [string, string, number],
  BorrowerBTCTransferProofSubmittedEventObject
>;

export type BorrowerBTCTransferProofSubmittedEventFilter =
  TypedEventFilter<BorrowerBTCTransferProofSubmittedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LenderBTCTransferManuallyConfirmedEventObject {
  orderId: string;
}
export type LenderBTCTransferManuallyConfirmedEvent = TypedEvent<
  [string],
  LenderBTCTransferManuallyConfirmedEventObject
>;

export type LenderBTCTransferManuallyConfirmedEventFilter =
  TypedEventFilter<LenderBTCTransferManuallyConfirmedEvent>;

export interface LenderBTCTransferProofSubmittedEventObject {
  orderId: string;
  zkTxHash: string;
  status: number;
}
export type LenderBTCTransferProofSubmittedEvent = TypedEvent<
  [string, string, number],
  LenderBTCTransferProofSubmittedEventObject
>;

export type LenderBTCTransferProofSubmittedEventFilter =
  TypedEventFilter<LenderBTCTransferProofSubmittedEvent>;

export interface OrderClosedEventObject {
  orderId: string;
}
export type OrderClosedEvent = TypedEvent<[string], OrderClosedEventObject>;

export type OrderClosedEventFilter = TypedEventFilter<OrderClosedEvent>;

export interface OrderTakenEventObject {
  orderId: string;
  takerBtcAddress: string;
}
export type OrderTakenEvent = TypedEvent<
  [string, string],
  OrderTakenEventObject
>;

export type OrderTakenEventFilter = TypedEventFilter<OrderTakenEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RepaymentMadeEventObject {
  orderId: string;
  interest: BigNumber;
  principal: BigNumber;
  btcTxData: string;
  signature: string;
}
export type RepaymentMadeEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string],
  RepaymentMadeEventObject
>;

export type RepaymentMadeEventFilter = TypedEventFilter<RepaymentMadeEvent>;

export interface Order extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OrderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbitrationPayee(overrides?: CallOverrides): Promise<[string]>;

    borrow(
      preimage: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    borrowExpirationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowedTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrower(overrides?: CallOverrides): Promise<[string]>;

    borrowerBtcAddress(overrides?: CallOverrides): Promise<[string]>;

    borrowerConfirmRewardsTips(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowerProofBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowerProofTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    borrowerPublicKey(overrides?: CallOverrides): Promise<[string]>;

    borrowerRepaidTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    closeOrder(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    collateralAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    confirmRegularUnlockTransfer(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    confirmTransferToLender(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createBorrowOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _refundAddress: string,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createLendOrder(
      _token: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getArbitrationRequestCost(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRegularUnlockTransferZkpStatus(
      overrides?: CallOverrides
    ): Promise<[number]>;

    getToLenderTransferZkpStatus(overrides?: CallOverrides): Promise<[number]>;

    initialize(
      _loanTools: string,
      _takenExpireTime: BigNumberish,
      _submitProofExpireTime: BigNumberish,
      _repaidExpireTime: BigNumberish,
      _proofedDelayBlock: BigNumberish,
      _arbitrationPayee: string,
      _lockTime1: BigNumberish,
      _lockTime2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    interestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    interestValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    isArbitrationProofValid(overrides?: CallOverrides): Promise<[boolean]>;

    lender(overrides?: CallOverrides): Promise<[string]>;

    lenderAddressType(overrides?: CallOverrides): Promise<[number]>;

    lenderBtcAddress(overrides?: CallOverrides): Promise<[string]>;

    lenderConfirmRewardsTips(overrides?: CallOverrides): Promise<[BigNumber]>;

    lenderManuallyConfirmBTCTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lenderProofBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    lenderProofTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    lenderPublicKey(overrides?: CallOverrides): Promise<[string]>;

    limitedDays(overrides?: CallOverrides): Promise<[BigNumber]>;

    loanScript(overrides?: CallOverrides): Promise<[string]>;

    lockTime1(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockTime2(overrides?: CallOverrides): Promise<[BigNumber]>;

    network(overrides?: CallOverrides): Promise<[string]>;

    orderType(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    preImage(overrides?: CallOverrides): Promise<[string]>;

    preImageHash(overrides?: CallOverrides): Promise<[string]>;

    proofedDelayBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repaidExpireTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    repay(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    repayBtcRawData(overrides?: CallOverrides): Promise<[string]>;

    repaySignature(overrides?: CallOverrides): Promise<[string]>;

    requestArbitration(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    submitProofExpirationTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitRegularUnlockTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    submitToLenderTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    takeOrder(
      btcAddress: string,
      publicKey: BytesLike,
      preimageHash: BytesLike,
      net: string,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    takenExpireTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    takenTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    toBorrowerBtcTx(
      overrides?: CallOverrides
    ): Promise<[string, string] & { wTxId: string; txId: string }>;

    toBorrowerMerkleProofTx(overrides?: CallOverrides): Promise<[string]>;

    toLenderBtcTx(
      overrides?: CallOverrides
    ): Promise<[string, string] & { wTxId: string; txId: string }>;

    toLenderMerkleProofTx(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  arbitrationPayee(overrides?: CallOverrides): Promise<string>;

  borrow(
    preimage: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  borrowExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

  borrowedTime(overrides?: CallOverrides): Promise<BigNumber>;

  borrower(overrides?: CallOverrides): Promise<string>;

  borrowerBtcAddress(overrides?: CallOverrides): Promise<string>;

  borrowerConfirmRewardsTips(overrides?: CallOverrides): Promise<BigNumber>;

  borrowerProofBlock(overrides?: CallOverrides): Promise<BigNumber>;

  borrowerProofTime(overrides?: CallOverrides): Promise<BigNumber>;

  borrowerPublicKey(overrides?: CallOverrides): Promise<string>;

  borrowerRepaidTime(overrides?: CallOverrides): Promise<BigNumber>;

  closeOrder(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

  confirmRegularUnlockTransfer(
    wTxId: BytesLike,
    btcTxId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  confirmTransferToLender(
    wTxId: BytesLike,
    btcTxId: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createBorrowOrder(
    _token: string,
    _amount: BigNumberish,
    _durationDays: BigNumberish,
    _refundAddress: string,
    _publicKey: BytesLike,
    confirmPaymentTip: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createLendOrder(
    _token: string,
    _amount: BigNumberish,
    _duration: BigNumberish,
    _addressType: BigNumberish,
    _publicKey: BytesLike,
    confirmPaymentTip: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createTime(overrides?: CallOverrides): Promise<BigNumber>;

  getArbitrationRequestCost(overrides?: CallOverrides): Promise<BigNumber>;

  getRegularUnlockTransferZkpStatus(overrides?: CallOverrides): Promise<number>;

  getToLenderTransferZkpStatus(overrides?: CallOverrides): Promise<number>;

  initialize(
    _loanTools: string,
    _takenExpireTime: BigNumberish,
    _submitProofExpireTime: BigNumberish,
    _repaidExpireTime: BigNumberish,
    _proofedDelayBlock: BigNumberish,
    _arbitrationPayee: string,
    _lockTime1: BigNumberish,
    _lockTime2: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  interestValue(overrides?: CallOverrides): Promise<BigNumber>;

  isArbitrationProofValid(overrides?: CallOverrides): Promise<boolean>;

  lender(overrides?: CallOverrides): Promise<string>;

  lenderAddressType(overrides?: CallOverrides): Promise<number>;

  lenderBtcAddress(overrides?: CallOverrides): Promise<string>;

  lenderConfirmRewardsTips(overrides?: CallOverrides): Promise<BigNumber>;

  lenderManuallyConfirmBTCTime(overrides?: CallOverrides): Promise<BigNumber>;

  lenderProofBlock(overrides?: CallOverrides): Promise<BigNumber>;

  lenderProofTime(overrides?: CallOverrides): Promise<BigNumber>;

  lenderPublicKey(overrides?: CallOverrides): Promise<string>;

  limitedDays(overrides?: CallOverrides): Promise<BigNumber>;

  loanScript(overrides?: CallOverrides): Promise<string>;

  lockTime1(overrides?: CallOverrides): Promise<BigNumber>;

  lockTime2(overrides?: CallOverrides): Promise<BigNumber>;

  network(overrides?: CallOverrides): Promise<string>;

  orderType(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  preImage(overrides?: CallOverrides): Promise<string>;

  preImageHash(overrides?: CallOverrides): Promise<string>;

  proofedDelayBlock(overrides?: CallOverrides): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repaidExpireTime(overrides?: CallOverrides): Promise<BigNumber>;

  repay(
    btcRawData: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  repayBtcRawData(overrides?: CallOverrides): Promise<string>;

  repaySignature(overrides?: CallOverrides): Promise<string>;

  requestArbitration(
    btcRawData: BytesLike,
    signature: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  submitProofExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

  submitRegularUnlockTransferProof(
    txData: BytesLike,
    utxos: BytesLike[],
    blockHeight: BigNumberish,
    merkleProof: MerkleProofDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  submitToLenderTransferProof(
    txData: BytesLike,
    utxos: BytesLike[],
    blockHeight: BigNumberish,
    merkleProof: MerkleProofDataStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  takeOrder(
    btcAddress: string,
    publicKey: BytesLike,
    preimageHash: BytesLike,
    net: string,
    confirmPaymentTip: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  takenExpireTime(overrides?: CallOverrides): Promise<BigNumber>;

  takenTime(overrides?: CallOverrides): Promise<BigNumber>;

  toBorrowerBtcTx(
    overrides?: CallOverrides
  ): Promise<[string, string] & { wTxId: string; txId: string }>;

  toBorrowerMerkleProofTx(overrides?: CallOverrides): Promise<string>;

  toLenderBtcTx(
    overrides?: CallOverrides
  ): Promise<[string, string] & { wTxId: string; txId: string }>;

  toLenderMerkleProofTx(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbitrationPayee(overrides?: CallOverrides): Promise<string>;

    borrow(preimage: BytesLike, overrides?: CallOverrides): Promise<void>;

    borrowExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    borrowedTime(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<string>;

    borrowerBtcAddress(overrides?: CallOverrides): Promise<string>;

    borrowerConfirmRewardsTips(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerProofBlock(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerProofTime(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerPublicKey(overrides?: CallOverrides): Promise<string>;

    borrowerRepaidTime(overrides?: CallOverrides): Promise<BigNumber>;

    closeOrder(overrides?: CallOverrides): Promise<void>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    confirmRegularUnlockTransfer(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    confirmTransferToLender(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    createBorrowOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _refundAddress: string,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLendOrder(
      _token: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createTime(overrides?: CallOverrides): Promise<BigNumber>;

    getArbitrationRequestCost(overrides?: CallOverrides): Promise<BigNumber>;

    getRegularUnlockTransferZkpStatus(
      overrides?: CallOverrides
    ): Promise<number>;

    getToLenderTransferZkpStatus(overrides?: CallOverrides): Promise<number>;

    initialize(
      _loanTools: string,
      _takenExpireTime: BigNumberish,
      _submitProofExpireTime: BigNumberish,
      _repaidExpireTime: BigNumberish,
      _proofedDelayBlock: BigNumberish,
      _arbitrationPayee: string,
      _lockTime1: BigNumberish,
      _lockTime2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    interestValue(overrides?: CallOverrides): Promise<BigNumber>;

    isArbitrationProofValid(overrides?: CallOverrides): Promise<boolean>;

    lender(overrides?: CallOverrides): Promise<string>;

    lenderAddressType(overrides?: CallOverrides): Promise<number>;

    lenderBtcAddress(overrides?: CallOverrides): Promise<string>;

    lenderConfirmRewardsTips(overrides?: CallOverrides): Promise<BigNumber>;

    lenderManuallyConfirmBTCTime(overrides?: CallOverrides): Promise<BigNumber>;

    lenderProofBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lenderProofTime(overrides?: CallOverrides): Promise<BigNumber>;

    lenderPublicKey(overrides?: CallOverrides): Promise<string>;

    limitedDays(overrides?: CallOverrides): Promise<BigNumber>;

    loanScript(overrides?: CallOverrides): Promise<string>;

    lockTime1(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime2(overrides?: CallOverrides): Promise<BigNumber>;

    network(overrides?: CallOverrides): Promise<string>;

    orderType(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    preImage(overrides?: CallOverrides): Promise<string>;

    preImageHash(overrides?: CallOverrides): Promise<string>;

    proofedDelayBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    repaidExpireTime(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    repayBtcRawData(overrides?: CallOverrides): Promise<string>;

    repaySignature(overrides?: CallOverrides): Promise<string>;

    requestArbitration(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    submitProofExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitRegularUnlockTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    submitToLenderTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    takeOrder(
      btcAddress: string,
      publicKey: BytesLike,
      preimageHash: BytesLike,
      net: string,
      confirmPaymentTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takenExpireTime(overrides?: CallOverrides): Promise<BigNumber>;

    takenTime(overrides?: CallOverrides): Promise<BigNumber>;

    toBorrowerBtcTx(
      overrides?: CallOverrides
    ): Promise<[string, string] & { wTxId: string; txId: string }>;

    toBorrowerMerkleProofTx(overrides?: CallOverrides): Promise<string>;

    toLenderBtcTx(
      overrides?: CallOverrides
    ): Promise<[string, string] & { wTxId: string; txId: string }>;

    toLenderMerkleProofTx(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ArbitrationRequested(address)"(
      orderId?: string | null
    ): ArbitrationRequestedEventFilter;
    ArbitrationRequested(
      orderId?: string | null
    ): ArbitrationRequestedEventFilter;

    "BorrowSuccessful(address)"(
      orderId?: string | null
    ): BorrowSuccessfulEventFilter;
    BorrowSuccessful(orderId?: string | null): BorrowSuccessfulEventFilter;

    "BorrowerBTCTransferManuallyConfirmed(address)"(
      orderId?: string | null
    ): BorrowerBTCTransferManuallyConfirmedEventFilter;
    BorrowerBTCTransferManuallyConfirmed(
      orderId?: string | null
    ): BorrowerBTCTransferManuallyConfirmedEventFilter;

    "BorrowerBTCTransferProofSubmitted(address,bytes32,uint8)"(
      orderId?: string | null,
      zkTxHash?: null,
      status?: null
    ): BorrowerBTCTransferProofSubmittedEventFilter;
    BorrowerBTCTransferProofSubmitted(
      orderId?: string | null,
      zkTxHash?: null,
      status?: null
    ): BorrowerBTCTransferProofSubmittedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LenderBTCTransferManuallyConfirmed(address)"(
      orderId?: string | null
    ): LenderBTCTransferManuallyConfirmedEventFilter;
    LenderBTCTransferManuallyConfirmed(
      orderId?: string | null
    ): LenderBTCTransferManuallyConfirmedEventFilter;

    "LenderBTCTransferProofSubmitted(address,bytes32,uint8)"(
      orderId?: string | null,
      zkTxHash?: null,
      status?: null
    ): LenderBTCTransferProofSubmittedEventFilter;
    LenderBTCTransferProofSubmitted(
      orderId?: string | null,
      zkTxHash?: null,
      status?: null
    ): LenderBTCTransferProofSubmittedEventFilter;

    "OrderClosed(address)"(orderId?: string | null): OrderClosedEventFilter;
    OrderClosed(orderId?: string | null): OrderClosedEventFilter;

    "OrderTaken(address,string)"(
      orderId?: string | null,
      takerBtcAddress?: null
    ): OrderTakenEventFilter;
    OrderTaken(
      orderId?: string | null,
      takerBtcAddress?: null
    ): OrderTakenEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RepaymentMade(address,uint256,uint256,bytes,bytes)"(
      orderId?: string | null,
      interest?: null,
      principal?: null,
      btcTxData?: null,
      signature?: null
    ): RepaymentMadeEventFilter;
    RepaymentMade(
      orderId?: string | null,
      interest?: null,
      principal?: null,
      btcTxData?: null,
      signature?: null
    ): RepaymentMadeEventFilter;
  };

  estimateGas: {
    arbitrationPayee(overrides?: CallOverrides): Promise<BigNumber>;

    borrow(
      preimage: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    borrowExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    borrowedTime(overrides?: CallOverrides): Promise<BigNumber>;

    borrower(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerBtcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerConfirmRewardsTips(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerProofBlock(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerProofTime(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    borrowerRepaidTime(overrides?: CallOverrides): Promise<BigNumber>;

    closeOrder(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    collateralAmount(overrides?: CallOverrides): Promise<BigNumber>;

    confirmRegularUnlockTransfer(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    confirmTransferToLender(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createBorrowOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _refundAddress: string,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createLendOrder(
      _token: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createTime(overrides?: CallOverrides): Promise<BigNumber>;

    getArbitrationRequestCost(overrides?: CallOverrides): Promise<BigNumber>;

    getRegularUnlockTransferZkpStatus(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getToLenderTransferZkpStatus(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _loanTools: string,
      _takenExpireTime: BigNumberish,
      _submitProofExpireTime: BigNumberish,
      _repaidExpireTime: BigNumberish,
      _proofedDelayBlock: BigNumberish,
      _arbitrationPayee: string,
      _lockTime1: BigNumberish,
      _lockTime2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    interestValue(overrides?: CallOverrides): Promise<BigNumber>;

    isArbitrationProofValid(overrides?: CallOverrides): Promise<BigNumber>;

    lender(overrides?: CallOverrides): Promise<BigNumber>;

    lenderAddressType(overrides?: CallOverrides): Promise<BigNumber>;

    lenderBtcAddress(overrides?: CallOverrides): Promise<BigNumber>;

    lenderConfirmRewardsTips(overrides?: CallOverrides): Promise<BigNumber>;

    lenderManuallyConfirmBTCTime(overrides?: CallOverrides): Promise<BigNumber>;

    lenderProofBlock(overrides?: CallOverrides): Promise<BigNumber>;

    lenderProofTime(overrides?: CallOverrides): Promise<BigNumber>;

    lenderPublicKey(overrides?: CallOverrides): Promise<BigNumber>;

    limitedDays(overrides?: CallOverrides): Promise<BigNumber>;

    loanScript(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime1(overrides?: CallOverrides): Promise<BigNumber>;

    lockTime2(overrides?: CallOverrides): Promise<BigNumber>;

    network(overrides?: CallOverrides): Promise<BigNumber>;

    orderType(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    preImage(overrides?: CallOverrides): Promise<BigNumber>;

    preImageHash(overrides?: CallOverrides): Promise<BigNumber>;

    proofedDelayBlock(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repaidExpireTime(overrides?: CallOverrides): Promise<BigNumber>;

    repay(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    repayBtcRawData(overrides?: CallOverrides): Promise<BigNumber>;

    repaySignature(overrides?: CallOverrides): Promise<BigNumber>;

    requestArbitration(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    submitProofExpirationTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitRegularUnlockTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    submitToLenderTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    takeOrder(
      btcAddress: string,
      publicKey: BytesLike,
      preimageHash: BytesLike,
      net: string,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    takenExpireTime(overrides?: CallOverrides): Promise<BigNumber>;

    takenTime(overrides?: CallOverrides): Promise<BigNumber>;

    toBorrowerBtcTx(overrides?: CallOverrides): Promise<BigNumber>;

    toBorrowerMerkleProofTx(overrides?: CallOverrides): Promise<BigNumber>;

    toLenderBtcTx(overrides?: CallOverrides): Promise<BigNumber>;

    toLenderMerkleProofTx(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAmount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbitrationPayee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrow(
      preimage: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    borrowExpirationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrower(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerBtcAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowerConfirmRewardsTips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowerProofBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    borrowerProofTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    borrowerRepaidTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    closeOrder(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    collateralAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    confirmRegularUnlockTransfer(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    confirmTransferToLender(
      wTxId: BytesLike,
      btcTxId: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createBorrowOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _refundAddress: string,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createLendOrder(
      _token: string,
      _amount: BigNumberish,
      _duration: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getArbitrationRequestCost(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegularUnlockTransferZkpStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getToLenderTransferZkpStatus(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _loanTools: string,
      _takenExpireTime: BigNumberish,
      _submitProofExpireTime: BigNumberish,
      _repaidExpireTime: BigNumberish,
      _proofedDelayBlock: BigNumberish,
      _arbitrationPayee: string,
      _lockTime1: BigNumberish,
      _lockTime2: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    interestValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isArbitrationProofValid(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderAddressType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderBtcAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderConfirmRewardsTips(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderManuallyConfirmBTCTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenderProofBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderProofTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lenderPublicKey(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limitedDays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loanScript(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTime1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockTime2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    network(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    orderType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preImage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    preImageHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proofedDelayBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repaidExpireTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repay(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    repayBtcRawData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    repaySignature(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestArbitration(
      btcRawData: BytesLike,
      signature: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitProofExpirationTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    submitRegularUnlockTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    submitToLenderTransferProof(
      txData: BytesLike,
      utxos: BytesLike[],
      blockHeight: BigNumberish,
      merkleProof: MerkleProofDataStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    takeOrder(
      btcAddress: string,
      publicKey: BytesLike,
      preimageHash: BytesLike,
      net: string,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    takenExpireTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    takenTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toBorrowerBtcTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toBorrowerMerkleProofTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toLenderBtcTx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    toLenderMerkleProofTx(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
