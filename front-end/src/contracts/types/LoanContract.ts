/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface LoanContractInterface extends utils.Interface {
  functions: {
    "SetLoanToolsAddress(address)": FunctionFragment;
    "changeProofedDelayBlock(uint256)": FunctionFragment;
    "changeRepaidExpireTime(uint256)": FunctionFragment;
    "changeSubmitProofExpireTime(uint256)": FunctionFragment;
    "changeTakenExpireTime(uint256)": FunctionFragment;
    "createBorrowOrder(address,uint256,uint256,string,bytes,uint256)": FunctionFragment;
    "createLendingOrder(address,uint256,uint256,uint8,bytes,uint256)": FunctionFragment;
    "getAssetPrice(address)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLockTime1(uint256)": FunctionFragment;
    "setLockTime2(uint256)": FunctionFragment;
    "setOrderFactory(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "SetLoanToolsAddress"
      | "changeProofedDelayBlock"
      | "changeRepaidExpireTime"
      | "changeSubmitProofExpireTime"
      | "changeTakenExpireTime"
      | "createBorrowOrder"
      | "createLendingOrder"
      | "getAssetPrice"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setLockTime1"
      | "setLockTime2"
      | "setOrderFactory"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "SetLoanToolsAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeProofedDelayBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRepaidExpireTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSubmitProofExpireTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeTakenExpireTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createBorrowOrder",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      string,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createLendingOrder",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLockTime1",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockTime2",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOrderFactory",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "SetLoanToolsAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeProofedDelayBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRepaidExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSubmitProofExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeTakenExpireTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createBorrowOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLendingOrder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockTime1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockTime2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOrderFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "DelayBlockChanged(uint256)": EventFragment;
    "Initialized(uint64)": EventFragment;
    "LoanToolsChanged(address)": EventFragment;
    "LockTime1Changed(uint256)": EventFragment;
    "LockTime2Changed(uint256)": EventFragment;
    "OrderCreated(address,uint8,uint256,address,uint256)": EventFragment;
    "OrderFactoryChanged(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RepaidExpireTimeChanged(uint256)": EventFragment;
    "SubmitProofExpireTimeChanged(uint256)": EventFragment;
    "TakenExpireTimeChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelayBlockChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LoanToolsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockTime1Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockTime2Changed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFactoryChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RepaidExpireTimeChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SubmitProofExpireTimeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TakenExpireTimeChanged"): EventFragment;
}

export interface DelayBlockChangedEventObject {
  value: BigNumber;
}
export type DelayBlockChangedEvent = TypedEvent<
  [BigNumber],
  DelayBlockChangedEventObject
>;

export type DelayBlockChangedEventFilter =
  TypedEventFilter<DelayBlockChangedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface LoanToolsChangedEventObject {
  tools: string;
}
export type LoanToolsChangedEvent = TypedEvent<
  [string],
  LoanToolsChangedEventObject
>;

export type LoanToolsChangedEventFilter =
  TypedEventFilter<LoanToolsChangedEvent>;

export interface LockTime1ChangedEventObject {
  value: BigNumber;
}
export type LockTime1ChangedEvent = TypedEvent<
  [BigNumber],
  LockTime1ChangedEventObject
>;

export type LockTime1ChangedEventFilter =
  TypedEventFilter<LockTime1ChangedEvent>;

export interface LockTime2ChangedEventObject {
  value: BigNumber;
}
export type LockTime2ChangedEvent = TypedEvent<
  [BigNumber],
  LockTime2ChangedEventObject
>;

export type LockTime2ChangedEventFilter =
  TypedEventFilter<LockTime2ChangedEvent>;

export interface OrderCreatedEventObject {
  orderId: string;
  orderType: number;
  collateral: BigNumber;
  token: string;
  tokenAmount: BigNumber;
}
export type OrderCreatedEvent = TypedEvent<
  [string, number, BigNumber, string, BigNumber],
  OrderCreatedEventObject
>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderFactoryChangedEventObject {
  factory: string;
}
export type OrderFactoryChangedEvent = TypedEvent<
  [string],
  OrderFactoryChangedEventObject
>;

export type OrderFactoryChangedEventFilter =
  TypedEventFilter<OrderFactoryChangedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RepaidExpireTimeChangedEventObject {
  time: BigNumber;
}
export type RepaidExpireTimeChangedEvent = TypedEvent<
  [BigNumber],
  RepaidExpireTimeChangedEventObject
>;

export type RepaidExpireTimeChangedEventFilter =
  TypedEventFilter<RepaidExpireTimeChangedEvent>;

export interface SubmitProofExpireTimeChangedEventObject {
  time: BigNumber;
}
export type SubmitProofExpireTimeChangedEvent = TypedEvent<
  [BigNumber],
  SubmitProofExpireTimeChangedEventObject
>;

export type SubmitProofExpireTimeChangedEventFilter =
  TypedEventFilter<SubmitProofExpireTimeChangedEvent>;

export interface TakenExpireTimeChangedEventObject {
  time: BigNumber;
}
export type TakenExpireTimeChangedEvent = TypedEvent<
  [BigNumber],
  TakenExpireTimeChangedEventObject
>;

export type TakenExpireTimeChangedEventFilter =
  TypedEventFilter<TakenExpireTimeChangedEvent>;

export interface LoanContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LoanContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    SetLoanToolsAddress(
      tools: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeProofedDelayBlock(
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeRepaidExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeSubmitProofExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    changeTakenExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createBorrowOrder(
      token: string,
      amount: BigNumberish,
      durationDays: BigNumberish,
      btcAddress: string,
      publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    createLendingOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getAssetPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _loanTools: string,
      _orderFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLockTime1(
      lockDaysInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setLockTime2(
      lockDaysInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setOrderFactory(
      factory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  SetLoanToolsAddress(
    tools: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeProofedDelayBlock(
    num: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeRepaidExpireTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeSubmitProofExpireTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  changeTakenExpireTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createBorrowOrder(
    token: string,
    amount: BigNumberish,
    durationDays: BigNumberish,
    btcAddress: string,
    publicKey: BytesLike,
    confirmPaymentTip: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  createLendingOrder(
    _token: string,
    _amount: BigNumberish,
    _durationDays: BigNumberish,
    _addressType: BigNumberish,
    _publicKey: BytesLike,
    confirmPaymentTip: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getAssetPrice(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _loanTools: string,
    _orderFactory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLockTime1(
    lockDaysInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setLockTime2(
    lockDaysInSeconds: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setOrderFactory(
    factory: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    SetLoanToolsAddress(
      tools: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeProofedDelayBlock(
      num: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeRepaidExpireTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSubmitProofExpireTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    changeTakenExpireTime(
      time: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createBorrowOrder(
      token: string,
      amount: BigNumberish,
      durationDays: BigNumberish,
      btcAddress: string,
      publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLendingOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAssetPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _loanTools: string,
      _orderFactory: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLockTime1(
      lockDaysInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockTime2(
      lockDaysInSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOrderFactory(factory: string, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DelayBlockChanged(uint256)"(value?: null): DelayBlockChangedEventFilter;
    DelayBlockChanged(value?: null): DelayBlockChangedEventFilter;

    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "LoanToolsChanged(address)"(
      tools?: string | null
    ): LoanToolsChangedEventFilter;
    LoanToolsChanged(tools?: string | null): LoanToolsChangedEventFilter;

    "LockTime1Changed(uint256)"(value?: null): LockTime1ChangedEventFilter;
    LockTime1Changed(value?: null): LockTime1ChangedEventFilter;

    "LockTime2Changed(uint256)"(value?: null): LockTime2ChangedEventFilter;
    LockTime2Changed(value?: null): LockTime2ChangedEventFilter;

    "OrderCreated(address,uint8,uint256,address,uint256)"(
      orderId?: string | null,
      orderType?: BigNumberish | null,
      collateral?: null,
      token?: null,
      tokenAmount?: null
    ): OrderCreatedEventFilter;
    OrderCreated(
      orderId?: string | null,
      orderType?: BigNumberish | null,
      collateral?: null,
      token?: null,
      tokenAmount?: null
    ): OrderCreatedEventFilter;

    "OrderFactoryChanged(address)"(
      factory?: string | null
    ): OrderFactoryChangedEventFilter;
    OrderFactoryChanged(
      factory?: string | null
    ): OrderFactoryChangedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RepaidExpireTimeChanged(uint256)"(
      time?: null
    ): RepaidExpireTimeChangedEventFilter;
    RepaidExpireTimeChanged(time?: null): RepaidExpireTimeChangedEventFilter;

    "SubmitProofExpireTimeChanged(uint256)"(
      time?: null
    ): SubmitProofExpireTimeChangedEventFilter;
    SubmitProofExpireTimeChanged(
      time?: null
    ): SubmitProofExpireTimeChangedEventFilter;

    "TakenExpireTimeChanged(uint256)"(
      time?: null
    ): TakenExpireTimeChangedEventFilter;
    TakenExpireTimeChanged(time?: null): TakenExpireTimeChangedEventFilter;
  };

  estimateGas: {
    SetLoanToolsAddress(
      tools: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeProofedDelayBlock(
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeRepaidExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeSubmitProofExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    changeTakenExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createBorrowOrder(
      token: string,
      amount: BigNumberish,
      durationDays: BigNumberish,
      btcAddress: string,
      publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    createLendingOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getAssetPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _loanTools: string,
      _orderFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLockTime1(
      lockDaysInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setLockTime2(
      lockDaysInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setOrderFactory(
      factory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    SetLoanToolsAddress(
      tools: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeProofedDelayBlock(
      num: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeRepaidExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeSubmitProofExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    changeTakenExpireTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createBorrowOrder(
      token: string,
      amount: BigNumberish,
      durationDays: BigNumberish,
      btcAddress: string,
      publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createLendingOrder(
      _token: string,
      _amount: BigNumberish,
      _durationDays: BigNumberish,
      _addressType: BigNumberish,
      _publicKey: BytesLike,
      confirmPaymentTip: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getAssetPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _loanTools: string,
      _orderFactory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLockTime1(
      lockDaysInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setLockTime2(
      lockDaysInSeconds: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setOrderFactory(
      factory: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
