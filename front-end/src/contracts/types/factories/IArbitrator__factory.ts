/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IArbitrator, IArbitratorInterface } from "../IArbitrator";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_queryId",
        type: "bytes32",
      },
    ],
    name: "getArbitrationStatus",
    outputs: [
      {
        internalType: "enum IArbitrator.ArbitrationStatus",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getArbitratorPublicKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_btcTxToSign",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "_queryId",
        type: "bytes32",
      },
    ],
    name: "requestArbitration",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

export class IArbitrator__factory {
  static readonly abi = _abi;
  static createInterface(): IArbitratorInterface {
    return new utils.Interface(_abi) as IArbitratorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IArbitrator {
    return new Contract(address, _abi, signerOrProvider) as IArbitrator;
  }
}
