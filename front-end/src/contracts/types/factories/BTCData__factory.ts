/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { BTCData, BTCDataInterface } from "../BTCData";

const _abi = [
  {
    type: "constructor",
    stateMutability: "nonpayable",
    inputs: [
      {
        type: "uint32",
        name: "_version",
        internalType: "uint32",
      },
      {
        type: "bytes32",
        name: "_prevBlockHash",
        internalType: "bytes32",
      },
      {
        type: "bytes32",
        name: "_merkleRoot",
        internalType: "bytes32",
      },
      {
        type: "uint32",
        name: "_timestamp",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "_bits",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "_nonce",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "_height",
        internalType: "uint32",
      },
      {
        type: "bytes32",
        name: "_blockHash",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "event",
    name: "NewBlockAdded",
    inputs: [
      {
        type: "uint32",
        name: "_version",
        internalType: "uint32",
        indexed: false,
      },
      {
        type: "bytes32",
        name: "_prevBlockHash",
        internalType: "bytes32",
        indexed: false,
      },
      {
        type: "bytes32",
        name: "_merkleRoot",
        internalType: "bytes32",
        indexed: false,
      },
      {
        type: "uint32",
        name: "_timestamp",
        internalType: "uint32",
        indexed: false,
      },
      {
        type: "uint32",
        name: "_bits",
        internalType: "uint32",
        indexed: false,
      },
      {
        type: "uint32",
        name: "_nonce",
        internalType: "uint32",
        indexed: false,
      },
      {
        type: "uint32",
        name: "_height",
        internalType: "uint32",
        indexed: false,
      },
      {
        type: "bytes32",
        name: "_blockHash",
        internalType: "bytes32",
        indexed: false,
      },
    ],
    anonymous: false,
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "addBlock",
    inputs: [
      {
        type: "uint32",
        name: "_version",
        internalType: "uint32",
      },
      {
        type: "bytes32",
        name: "_prevBlockHash",
        internalType: "bytes32",
      },
      {
        type: "bytes32",
        name: "_merkleRoot",
        internalType: "bytes32",
      },
      {
        type: "uint32",
        name: "_timestamp",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "_bits",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "_nonce",
        internalType: "uint32",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "nonpayable",
    outputs: [],
    name: "addBlocks",
    inputs: [
      {
        type: "uint32[]",
        name: "_version",
        internalType: "uint32[]",
      },
      {
        type: "bytes32[]",
        name: "_prevBlockHash",
        internalType: "bytes32[]",
      },
      {
        type: "bytes32[]",
        name: "_merkleRoot",
        internalType: "bytes32[]",
      },
      {
        type: "uint32[]",
        name: "_timestamp",
        internalType: "uint32[]",
      },
      {
        type: "uint32[]",
        name: "_bits",
        internalType: "uint32[]",
      },
      {
        type: "uint32[]",
        name: "_nonce",
        internalType: "uint32[]",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint32",
        name: "version",
        internalType: "uint32",
      },
      {
        type: "bytes32",
        name: "prevBlockHash",
        internalType: "bytes32",
      },
      {
        type: "bytes32",
        name: "merkleRoot",
        internalType: "bytes32",
      },
      {
        type: "uint32",
        name: "timestamp",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "bits",
        internalType: "uint32",
      },
      {
        type: "uint32",
        name: "nonce",
        internalType: "uint32",
      },
      {
        type: "bytes32",
        name: "blockHash",
        internalType: "bytes32",
      },
      {
        type: "uint32",
        name: "height",
        internalType: "uint32",
      },
    ],
    name: "blocks",
    inputs: [
      {
        type: "bytes32",
        name: "",
        internalType: "bytes32",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "tuple",
        name: "",
        internalType: "struct BtcBlockHeaders.BlockHeader",
        components: [
          {
            type: "uint32",
            name: "version",
            internalType: "uint32",
          },
          {
            type: "bytes32",
            name: "prevBlockHash",
            internalType: "bytes32",
          },
          {
            type: "bytes32",
            name: "merkleRoot",
            internalType: "bytes32",
          },
          {
            type: "uint32",
            name: "timestamp",
            internalType: "uint32",
          },
          {
            type: "uint32",
            name: "bits",
            internalType: "uint32",
          },
          {
            type: "uint32",
            name: "nonce",
            internalType: "uint32",
          },
          {
            type: "bytes32",
            name: "blockHash",
            internalType: "bytes32",
          },
          {
            type: "uint32",
            name: "height",
            internalType: "uint32",
          },
        ],
      },
    ],
    name: "getBlockByHeight",
    inputs: [
      {
        type: "uint32",
        name: "_height",
        internalType: "uint32",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "bytes32",
        name: "",
        internalType: "bytes32",
      },
    ],
    name: "heights",
    inputs: [
      {
        type: "uint32",
        name: "",
        internalType: "uint32",
      },
      {
        type: "uint256",
        name: "",
        internalType: "uint256",
      },
    ],
  },
  {
    type: "function",
    stateMutability: "view",
    outputs: [
      {
        type: "uint32",
        name: "",
        internalType: "uint32",
      },
    ],
    name: "lastHeight",
    inputs: [],
  },
] as const;

export class BTCData__factory {
  static readonly abi = _abi;
  static createInterface(): BTCDataInterface {
    return new utils.Interface(_abi) as BTCDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BTCData {
    return new Contract(address, _abi, signerOrProvider) as BTCData;
  }
}
