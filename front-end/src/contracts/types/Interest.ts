/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface InterestInterface extends utils.Interface {
  functions: {
    "GetCollateralAmount(address,uint256,uint256)": FunctionFragment;
    "GetInterestRate(uint256)": FunctionFragment;
    "GetInterestValue(uint256,uint256)": FunctionFragment;
    "GetLoanLimit(uint256)": FunctionFragment;
    "assetOracle()": FunctionFragment;
    "base()": FunctionFragment;
    "btc()": FunctionFragment;
    "btcPrecision()": FunctionFragment;
    "decimalAdjustment()": FunctionFragment;
    "getAssetPrice(address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAssetOracle(address)": FunctionFragment;
    "setBase(uint256)": FunctionFragment;
    "setBtcAddress(address)": FunctionFragment;
    "setCollateralFactor(uint256)": FunctionFragment;
    "setDecimalAdjustment(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "GetCollateralAmount"
      | "GetInterestRate"
      | "GetInterestValue"
      | "GetLoanLimit"
      | "assetOracle"
      | "base"
      | "btc"
      | "btcPrecision"
      | "decimalAdjustment"
      | "getAssetPrice"
      | "initialize"
      | "owner"
      | "renounceOwnership"
      | "setAssetOracle"
      | "setBase"
      | "setBtcAddress"
      | "setCollateralFactor"
      | "setDecimalAdjustment"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "GetCollateralAmount",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetInterestRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetInterestValue",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetLoanLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assetOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(functionFragment: "btc", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "btcPrecision",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalAdjustment",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAssetOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBase",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBtcAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setCollateralFactor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecimalAdjustment",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "GetCollateralAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetInterestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetInterestValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetLoanLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "btc", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "btcPrecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAssetOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBtcAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCollateralFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDecimalAdjustment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint64)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAssetOracle(address)": EventFragment;
    "SetBaseEvent(uint256)": EventFragment;
    "SetBtcAddress(address)": EventFragment;
    "SetCollateralFactory(uint256)": EventFragment;
    "SetDecimalAdjustment(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAssetOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBaseEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBtcAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetCollateralFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDecimalAdjustment"): EventFragment;
}

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SetAssetOracleEventObject {
  oracle: string;
}
export type SetAssetOracleEvent = TypedEvent<
  [string],
  SetAssetOracleEventObject
>;

export type SetAssetOracleEventFilter = TypedEventFilter<SetAssetOracleEvent>;

export interface SetBaseEventEventObject {
  v: BigNumber;
}
export type SetBaseEventEvent = TypedEvent<
  [BigNumber],
  SetBaseEventEventObject
>;

export type SetBaseEventEventFilter = TypedEventFilter<SetBaseEventEvent>;

export interface SetBtcAddressEventObject {
  btcAddress: string;
}
export type SetBtcAddressEvent = TypedEvent<[string], SetBtcAddressEventObject>;

export type SetBtcAddressEventFilter = TypedEventFilter<SetBtcAddressEvent>;

export interface SetCollateralFactoryEventObject {
  v: BigNumber;
}
export type SetCollateralFactoryEvent = TypedEvent<
  [BigNumber],
  SetCollateralFactoryEventObject
>;

export type SetCollateralFactoryEventFilter =
  TypedEventFilter<SetCollateralFactoryEvent>;

export interface SetDecimalAdjustmentEventObject {
  adjust: BigNumber;
}
export type SetDecimalAdjustmentEvent = TypedEvent<
  [BigNumber],
  SetDecimalAdjustmentEventObject
>;

export type SetDecimalAdjustmentEventFilter =
  TypedEventFilter<SetDecimalAdjustmentEvent>;

export interface Interest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: InterestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    GetCollateralAmount(
      token: string,
      tokenAmount: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GetInterestRate(
      limitedDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GetInterestValue(
      seedAmount: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    GetLoanLimit(
      satoshiCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    assetOracle(overrides?: CallOverrides): Promise<[string]>;

    base(overrides?: CallOverrides): Promise<[BigNumber]>;

    btc(overrides?: CallOverrides): Promise<[string]>;

    btcPrecision(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimalAdjustment(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetPrice(
      asset: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setAssetOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBase(
      _base: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setBtcAddress(
      _btc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setCollateralFactor(
      _collateralFactory: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setDecimalAdjustment(
      _adjust: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  GetCollateralAmount(
    token: string,
    tokenAmount: BigNumberish,
    interest: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetInterestRate(
    limitedDays: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetInterestValue(
    seedAmount: BigNumberish,
    interestRate: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  GetLoanLimit(
    satoshiCount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  assetOracle(overrides?: CallOverrides): Promise<string>;

  base(overrides?: CallOverrides): Promise<BigNumber>;

  btc(overrides?: CallOverrides): Promise<string>;

  btcPrecision(overrides?: CallOverrides): Promise<BigNumber>;

  decimalAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetPrice(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

  initialize(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setAssetOracle(
    _oracle: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBase(
    _base: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setBtcAddress(
    _btc: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setCollateralFactor(
    _collateralFactory: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setDecimalAdjustment(
    _adjust: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    GetCollateralAmount(
      token: string,
      tokenAmount: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetInterestRate(
      limitedDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetInterestValue(
      seedAmount: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetLoanLimit(
      satoshiCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetOracle(overrides?: CallOverrides): Promise<string>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    btc(overrides?: CallOverrides): Promise<string>;

    btcPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    decimalAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAssetOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    setBase(_base: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setBtcAddress(_btc: string, overrides?: CallOverrides): Promise<void>;

    setCollateralFactor(
      _collateralFactory: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setDecimalAdjustment(
      _adjust: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint64)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "SetAssetOracle(address)"(oracle?: null): SetAssetOracleEventFilter;
    SetAssetOracle(oracle?: null): SetAssetOracleEventFilter;

    "SetBaseEvent(uint256)"(v?: null): SetBaseEventEventFilter;
    SetBaseEvent(v?: null): SetBaseEventEventFilter;

    "SetBtcAddress(address)"(btcAddress?: null): SetBtcAddressEventFilter;
    SetBtcAddress(btcAddress?: null): SetBtcAddressEventFilter;

    "SetCollateralFactory(uint256)"(v?: null): SetCollateralFactoryEventFilter;
    SetCollateralFactory(v?: null): SetCollateralFactoryEventFilter;

    "SetDecimalAdjustment(uint256)"(
      adjust?: null
    ): SetDecimalAdjustmentEventFilter;
    SetDecimalAdjustment(adjust?: null): SetDecimalAdjustmentEventFilter;
  };

  estimateGas: {
    GetCollateralAmount(
      token: string,
      tokenAmount: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetInterestRate(
      limitedDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetInterestValue(
      seedAmount: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    GetLoanLimit(
      satoshiCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    assetOracle(overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    btc(overrides?: CallOverrides): Promise<BigNumber>;

    btcPrecision(overrides?: CallOverrides): Promise<BigNumber>;

    decimalAdjustment(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetPrice(asset: string, overrides?: CallOverrides): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setAssetOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBase(
      _base: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setBtcAddress(
      _btc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setCollateralFactor(
      _collateralFactory: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setDecimalAdjustment(
      _adjust: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    GetCollateralAmount(
      token: string,
      tokenAmount: BigNumberish,
      interest: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetInterestRate(
      limitedDays: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetInterestValue(
      seedAmount: BigNumberish,
      interestRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GetLoanLimit(
      satoshiCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    btcPrecision(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decimalAdjustment(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetPrice(
      asset: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setAssetOracle(
      _oracle: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBase(
      _base: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setBtcAddress(
      _btc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setCollateralFactor(
      _collateralFactory: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setDecimalAdjustment(
      _adjust: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
